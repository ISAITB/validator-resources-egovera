# A comma-separated list of supported validation types. Values need to be reflected in properties validator.typeLabel, validator.schemaFile, validator.schematronFolder.
validator.type = definition_completeness, solution_conformance
# validator.typeOptions.definition_completeness = business_agnostic, tax, health, customs
validator.typeOptions.solution_conformance = business_agnostic, tax, health, customs
# Label to display in the web form for a given validation type (added as a postfix of validator.typeLabel). Only displayed if there are multiple types.
validator.typeLabel.definition_completeness = eGovERA definition completeness for models
validator.typeLabel.solution_conformance = eGovERA conformance for solutions
# Default type option labels. Specific ones can be set per case if needed via validator.typeOptionLabel.TYPE.OPTION.
validator.optionLabel.business_agnostic = Business Agnostic
validator.optionLabel.tax = Tax
validator.optionLabel.health = Health
validator.optionLabel.customs = Customs
# Complete label for type plus option (presented on the UI and reports). Properties are defined as validator.completeTypeOptionLabel.TYPE.OPTION.
# validator.completeTypeOptionLabel.definition_completeness.business_agnostic = eGovERA Definition Completeness for EIRA v6.0.0
validator.completeTypeOptionLabel.solution_conformance.business_agnostic = eGovERA Business Agnostic Solution Conformance for EIRA v6.0.0
validator.completeTypeOptionLabel.solution_conformance.tax = eGovERA Tax Solution Conformance for EIRA v6.0.0
validator.completeTypeOptionLabel.solution_conformance.health = eGovERA Health Solution Conformance for EIRA v6.0.0
validator.completeTypeOptionLabel.solution_conformance.customs = eGovERA Customs Solution Conformance for EIRA v6.0.0
# Labels for the web page.
validator.uploadTitle = eGovERA validator
validator.label.typeLabel = Validate for
validator.label.optionLabel = eGovERA domain
# The ID of the web service.
validator.webServiceId = eGovERAValidationService
# The description of the web service for element "xml".
validator.webServiceDescription.xml = The XML content representing the model to validate.
# The description of the web service for element "type". Only displayed if there are multiple types.
validator.webServiceDescription.type = The type of validation to perform (definition_completeness.latest, solution_conformance.latest).
# The description of the web service for element "externalSchematron". Only displayed if there are multiple types.
validator.webServiceDescription.externalSchematron = SAT(s) to consider. These are provided in a list containing two items ("content" for the SAT content and "type" that must be set as "sch" or "xsl" but that is otherwise ignored).
# The schematron files loaded for a given validation type+option (added as a postfix). This can be a file or folder (must never start with a '/').
validator.schematronFile.definition_completeness = egovera/definition.completeness/xslt
validator.schematronFile.solution_conformance.business_agnostic = egovera/solution.conformance/business_agnostic/xslt
validator.schematronFile.solution_conformance.tax = egovera/solution.conformance/tax/xslt
validator.schematronFile.solution_conformance.health = egovera/solution.conformance/health/xslt
validator.schematronFile.solution_conformance.customs = egovera/solution.conformance/customs/xslt
# The XSD files loaded for a given validation type (added as a postfix). This can be a file or folder (must never start with a '/').
validator.schemaFile.definition_completeness = common/xsds/3.1/archimate3_Diagram.xsd
validator.schemaFile.solution_conformance.business_agnostic = common/xsds/3.1/archimate3_Diagram.xsd
validator.schemaFile.solution_conformance.tax = common/xsds/3.1/archimate3_Diagram.xsd
validator.schemaFile.solution_conformance.health = common/xsds/3.1/archimate3_Diagram.xsd
validator.schemaFile.solution_conformance.customs = common/xsds/3.1/archimate3_Diagram.xsd
# User-provided validation artifacts.
# validator.externalSchematronFile.solution_to_dlsat.latest = required
# validator.externalSchematronFile.solution_to_dlsat.latest.preprocessor = 6_0_0/solution_dlsat/sat_to_sch_transformation.xsl
# validator.externalSchematronFile.solution_to_dlsat.latest.preprocessor.output = sch
# validator.externalSchematronFile.solution_to_dlsat.6_0_0 = required
# validator.externalSchematronFile.solution_to_dlsat.6_0_0.preprocessor = 6_0_0/solution_dlsat/sat_to_sch_transformation.xsl
# validator.externalSchematronFile.solution_to_dlsat.6_0_0.preprocessor.output = sch
# validator.externalSchematronFile.solution_to_dlsat.4_1_0 = required
# validator.externalSchematronFile.solution_to_dlsat.4_1_0.preprocessor = 4_1_0/solution_dlsat/sat_to_sch_transformation.xsl
# validator.externalSchematronFile.solution_to_dlsat.4_1_0.preprocessor.output = sch
# validator.externalSchematronFile.solution_to_dlsat.4_0_0 = required
# validator.externalSchematronFile.solution_to_dlsat.4_0_0.preprocessor = 4_0_0/solution_dlsat/sat_to_sch_transformation.xsl
# validator.externalSchematronFile.solution_to_dlsat.4_0_0.preprocessor.output = sch
# validator.externalSchematronFile.solution_to_dlsat.3_1_0 = required
# validator.externalSchematronFile.solution_to_dlsat.3_1_0.preprocessor = 3_1_0/solution_dlsat/sat_to_sch_transformation.xsl
# validator.externalSchematronFile.solution_to_dlsat.3_1_0.preprocessor.output = sch
# validator.externalSchematronFile.solution_to_dlsat.3_0_0 = required
# validator.externalSchematronFile.solution_to_dlsat.3_0_0.preprocessor = 3_0_0_solution_dlsat/sat_to_sch_transformation.xsl
# validator.externalSchematronFile.solution_to_dlsat.3_0_0.preprocessor.output = sch
# validator.label.externalSchematronLabel = SAT(s) to consider
# validator.label.externalSchematronPlaceholder = Select SAT model (in ArchiMate Model Exchange Format XML)...
# Whether or not to include the test made.
validator.includeTestDefinition = false
# Set to true to order validation reports. Setting to false uses the order from the schematron validation.
validator.reportsOrdered = true
# Banner for web user interface
validator.bannerHtml = <div style="background-color: LightYellow; padding-left: 25px; padding-right: 25px; padding-top: 20px; padding-bottom: 20px; margin-bottom: 20px; border-radius: 25px;">This validator is currently being updated, so the results may not be accurate. Apologies for the inconvenience.</div><div style="display: table;"><div style="display: table-cell; cursor: pointer;" class="validatorReload"><img alt="eGovERA" src="https://www.itb.ec.europa.eu/files/eira_logo.png" style="height: 170px"></div><div style="display: table-cell;padding-left: 20px;vertical-align: middle;"><h1 style="cursor: pointer" class="validatorReload">eGovERA<sup>&copy;</sup> validator</h1><p style="margin-top: 30px;">This service allows you to validate ArchiMate<sup>&reg;</sup> models against the eGovERA<sup>&copy;</sup>. More information on the eGovERA<sup>&copy;</sup> and its latest release is available in <a href="https://joinup.ec.europa.eu/solution/eira" target="_blank">Joinup</a>.</p><p>For questions and feedback please contact the eGovERA<sup>&copy;</sup> team at <a href="mailto:DIGIT-EIRA@ec.europa.eu">DIGIT-EIRA@ec.europa.eu</a>.</p></div></div>
# JavaScript code to support the banner HTML.
validator.javascriptExtension = $(document).ready(function() { $(".validatorReload").off().on("click", function() { window.location.href="upload"; });});